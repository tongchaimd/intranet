extends ../layout.pug


block title
	title= helpers.buildTitle('Business Cards')
block hero
	.hero.is-dark
		.hero-body
			h1.title Business Cards
block content
	.level.is-mobile
		.level-left
			a.button.is-info.level-item(href=paths.newBusinessCard())
					span.icon
						i.fas.fa-plus
					span Add Business Card
		.level-right
			.dropdown.level-item
				.dropdown-trigger(onclick="this.parentNode.classList.toggle('is-active')")
					button.button
						span.is-capitalized= preferLang
						span.icon.is-small
							i.fas.fa-angle-down
				.dropdown-menu
					.dropdown-content
						each language in languageList
							if language !== preferLang
								a.dropdown-item.is-capitalized(href=helpers.relQString({prefLang: language}))= language
	a.button(href=paths.businessCardsBasket()) Saved Cards
	table.table.is-fullwidth.is-hoverable
		thead
			tr
				mixin sortingHeader(path, text, bottom, right)
					- const sort = sortBy === path && direction;
					th= text
						.dropdown.is-pulled-right(class=`${bottom ? 'is-up' : ''} ${right ? 'is-right' : ''}`)
							.dropdown-trigger(onclick="this.parentNode.classList.toggle('is-active')" style="cursor: pointer;")
								span.icon
									if sort
										if sort === 'asc'
											i.fas.fa-sort-up
										else
											i.fas.fa-sort-down
									else
										i.fas.fa-sort
							.dropdown-menu
								.dropdown-content
									a.dropdown-item(href=`${helpers.relQString({ sort: path, direction: 'asc' })}`) ascending
									a.dropdown-item(href=`${helpers.relQString({ sort: path, direction: 'desc' })}`) descending
									.dropdown-divider
									a.dropdown-item(href=`${helpers.relQString({ sort: '', direction: '' })}`) no sorting
				th
					input.checkbox.check-this-page(type="checkbox" style="zoom: 1.25" data-post=paths.businessCardsBasket())
				+sortingHeader('fullName', 'Full Name')
				+sortingHeader('companyName', 'Company', false, true)
		tbody
			each card in cardList
				tr(onclick=`window.location.href="${paths.businessCards(card)}"` style="cursor: pointer;")
					td
						.control
							if basket.includes(card._id.toString())
								input.checkbox.select-card(type="checkbox" data-post=paths.businessCardsBasket() data-id=card._id checked style="zoom: 1.25")
							else
								input.checkbox.select-card(type="checkbox" data-post=paths.businessCardsBasket() data-id=card._id style="zoom: 1.25")
					td= card.fullName.prefer(preferLang, '-')
					td= card.companyName.prefer(preferLang, '-')
		tfoot
			tr
				th
					input.checkbox.check-this-page(type="checkbox" style="zoom: 1.25" data-post=paths.businessCardsBasket())
				+sortingHeader('fullName', 'Full Name', true)
				+sortingHeader('companyName', 'Company', true, true)
	script.
		const selectBoxList = document.querySelectorAll('.select-card');
		selectBoxList.forEach((elem) => {
			elem.addEventListener('click', onSelectBoxClick);
		});

		function onSelectBoxClick(e) {
			e.stopPropagation();
			e.preventDefault();
			if (this.checked) {
				basketQuery.call(this, [this.dataset.id], true);
			} else {
				basketQuery.call(this, [this.dataset.id]);
			}
		}

		const pageSelectBoxList = document.querySelectorAll('.check-this-page');
		pageSelectBoxList.forEach((elem) => {
			elem.addEventListener('click', onPageSelectBoxClick);
		});

		function onPageSelectBoxClick(e) {
			e.stopPropagation();
			e.preventDefault();
			if (this.checked) {
				basketQuery.call(this, getIdList(selectBoxList), true)
					.then(() => {
						selectBoxList.forEach((elem) => {
							elem.checked = true;
						});
						pageSelectBoxList.forEach((elem) => {
							elem.checked = true;
						});
					})
			} else {
				basketQuery.call(this, getIdList(selectBoxList))
					.then(() => {
						selectBoxList.forEach((elem) => {
							elem.checked = false;
						});
						pageSelectBoxList.forEach((elem) => {
							elem.checked = false;
						});
					})
			}
		}

		function basketQuery(idList, isPost) {
			return fetch(this.dataset.post, {
				credentials: 'same-origin',
				method: isPost ? 'POST' : 'DELETE',
				headers: {
					'content-type': 'application/json',
				},
				body: JSON.stringify({ idList }),
			})
				.then((res) => {
					if (res.ok) {
						this.checked = !!isPost;
						return;
					} else {
						return (new Error(res));
					}
				})
				.catch((err) => {
					console.log(err);
				})
		}

		function getIdList(checkboxList) {
			return Array.prototype.map.call(checkboxList, i => i.dataset.id);
		}
block after-content
	include ../partials/pagination.pug
