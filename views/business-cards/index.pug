extends ../layout.pug


block title
	title= helpers.buildTitle('Business Cards')
block hero
	.hero.is-dark
		.hero-body
			h1.title Business Cards
block content
	.level.is-mobile
		.level-left
			a.button.is-info.level-item(href=paths.newBusinessCard())
					span.icon
						i.fas.fa-plus
					span Add Business Card
		.level-right
			.dropdown.level-item
				.dropdown-trigger(onclick="this.parentNode.classList.toggle('is-active')")
					button.button
						span.is-capitalized= preferLang
						span.icon.is-small
							i.fas.fa-angle-down
				.dropdown-menu
					.dropdown-content
						each language in languageList
							if language !== preferLang
								a.dropdown-item.is-capitalized(href=helpers.relQString({prefLang: language}))= language
	a.button(href=paths.businessCardsBasket()) Saved Cards
	.field.has-addons
		.control.has-icons-left
			input.input#filter-input(type="text" placeholder="filter by tags" data-target=paths.businessCardsTags() autocomplete="off").autocomplete
			.autocomplete-items.is-hidden
			span.icon.is-left.is-medium
				i.fas.fa-tags.fa-lg
		.control
			a(data-target=helpers.qStringArrayAddingTemplate('filter')).button#add-filter
				span.icon
					i.fas.fa-plus
	mixin filterTag(value, delHref, index)
		.control
			.tags.has-addons
				span.tag.is-info.is-medium(style="cursor: pointer;" )
					if index !== undefined
						input.checkbox.or-group(type="checkbox" name=index style="margin-right: 1em;")
					span= value
				a(href=delHref).tag.is-delete.is-medium
	form(action=paths.businessCardsOrGroup()+helpers.relQString({}) method="POST" style="margin-bottom: 1em")
		if filterList && filterList.length
			- var checkboxable = filterList.reduce((c, i) => !i.includes(',') ? c+1 : c, 0)
			.field.is-grouped.is-grouped-multiline(style="align-items: baseline")
					each filter, index in filterList
						if filter.split(',').length > 1
							each subFilter, subIndex in filter.split(',').slice(0, -1)
								+filterTag(subFilter, helpers.remQStringNestedArray({'filter': [index, subIndex]}))
								.control
									span.tag.is-dark OR
							+filterTag(filter.split(',').slice(-1), helpers.remQStringNestedArray({'filter': [index, filter.split(',').length-1]}))
						else
							if checkboxable >= 2
								+filterTag(filter, helpers.remQStringArray({'filter': index}), index)
							else
								+filterTag(filter, helpers.remQStringArray({'filter': index}))
			if checkboxable >= 2
				.field
					.control
						input.button.is-link#or-button(type="submit" value="form 'OR' group" disabled)
	table.table.is-fullwidth.is-hoverable.is-bordered.is-striped
		thead
			tr
				mixin sortingHeader(path, text, bottom, right)
					- const sort = sortBy === path && direction;
					th= text
						.dropdown.is-pulled-right(class=`${bottom ? 'is-up' : ''} ${right ? 'is-right' : ''}`)
							.dropdown-trigger(onclick="this.parentNode.classList.toggle('is-active')" style="cursor: pointer;")
								span.icon
									if sort
										if sort === 'asc'
											i.fas.fa-sort-up
										else
											i.fas.fa-sort-down
									else
										i.fas.fa-sort
							.dropdown-menu
								.dropdown-content
									a.dropdown-item(href=`${helpers.relQString({ sort: path, direction: 'asc' })}`) ascending
									a.dropdown-item(href=`${helpers.relQString({ sort: path, direction: 'desc' })}`) descending
									.dropdown-divider
									a.dropdown-item(href=`${helpers.relQString({ sort: '', direction: '' })}`) no sorting
				th
					input.checkbox.check-this-page(type="checkbox" style="zoom: 1.25" data-post=paths.businessCardsBasket())
				+sortingHeader('fullName', 'Full Name')
				+sortingHeader('companyName', 'Company', false, true)
				th Tags
		tbody
			each card in cardList
				tr(onclick=`window.location.href="${paths.businessCards(card)}"` style="cursor: pointer;")
					td
						.control
							if basket.includes(card._id.toString())
								input.checkbox.select-card(type="checkbox" data-post=paths.businessCardsBasket() data-id=card._id checked style="zoom: 1.25")
							else
								input.checkbox.select-card(type="checkbox" data-post=paths.businessCardsBasket() data-id=card._id style="zoom: 1.25")
					td= card.fullName.prefer(preferLang, '-')
					td= card.companyName.prefer(preferLang, '-')
					td
						.tags
							each tag in card.tagList.slice(0, 7)
								.tag.is-info= tag
		tfoot
			tr
				th
					input.checkbox.check-this-page(type="checkbox" style="zoom: 1.25" data-post=paths.businessCardsBasket())
				+sortingHeader('fullName', 'Full Name', true)
				+sortingHeader('companyName', 'Company', true, true)
				th Tags
	script.
		const selectBoxList = document.querySelectorAll('.select-card');
		selectBoxList.forEach((elem) => {
			elem.addEventListener('click', onSelectBoxClick);
		});

		function onSelectBoxClick(e) {
			e.stopPropagation();
			e.preventDefault();
			if (this.checked) {
				basketQuery.call(this, [this.dataset.id], true);
			} else {
				basketQuery.call(this, [this.dataset.id]);
			}
		}

		const pageSelectBoxList = document.querySelectorAll('.check-this-page');
		pageSelectBoxList.forEach((elem) => {
			elem.addEventListener('click', onPageSelectBoxClick);
		});

		function onPageSelectBoxClick(e) {
			e.stopPropagation();
			e.preventDefault();
			if (this.checked) {
				basketQuery.call(this, getIdList(selectBoxList), true)
					.then(() => {
						selectBoxList.forEach((elem) => {
							elem.checked = true;
						});
						pageSelectBoxList.forEach((elem) => {
							elem.checked = true;
						});
					})
			} else {
				basketQuery.call(this, getIdList(selectBoxList))
					.then(() => {
						selectBoxList.forEach((elem) => {
							elem.checked = false;
						});
						pageSelectBoxList.forEach((elem) => {
							elem.checked = false;
						});
					})
			}
		}

		function basketQuery(idList, isPost) {
			return fetch(this.dataset.post, {
				credentials: 'same-origin',
				method: isPost ? 'POST' : 'DELETE',
				headers: {
					'content-type': 'application/json',
				},
				body: JSON.stringify({ idList }),
			})
				.then((res) => {
					if (res.ok) {
						this.checked = !!isPost;
						return;
					} else {
						return (new Error(res));
					}
				});
		}

		function getIdList(checkboxList) {
			return Array.prototype.map.call(checkboxList, i => i.dataset.id);
		}
	script.
		const filterInput = document.querySelector('#filter-input');
		const autocomplete = document.querySelector('.autocomplete-items');
		const addFilter = document.querySelector('#add-filter');
		filterInput.addEventListener('input', (e) => {
			const value = filterInput.value;
			if(!value) {
				autocomplete.classList.add('is-hidden');
				return;
			}
			fetch(new URL(`${filterInput.dataset.target}?search=${value}`, window.location.href), {
				credentials: 'same-origin',
			})
				.then((res) => {
					return res.json();
				})
				.then((list) => {
					autocomplete.innerHTML = '';
					list.slice(0,4).forEach((tag) => {
						const div = document.createElement('div');
						div.innerHTML = `<span>${tag}</span`
						autocomplete.appendChild(div);
						div.addEventListener('click', onSelectAutocomplete.bind(null, tag));
					});
					autocomplete.classList.remove('is-hidden');
				})
				.catch((err) => {
					console.log(err);
				})
		});

		function onSelectAutocomplete(tag) {
			filterInput.value = tag;
			autocomplete.innerHTML = '';
		}

		filterInput.addEventListener('keydown', (e) => {
			if(e.keyCode == 40) {
				// DOWN key
				const currentDiv = autocomplete.querySelector('.autocomplete-active');
				if (currentDiv) {
					currentDiv.classList.remove('autocomplete-active');
					if (currentDiv.nextSibling) {
						currentDiv.nextSibling.classList.add('autocomplete-active')
					}
				} else {
					autocomplete.childNodes[0].classList.add('autocomplete-active')
				}
			}
			if(e.keyCode == 38) {
				// UP key
				const currentDiv = autocomplete.querySelector('.autocomplete-active');
				if (currentDiv) {
					currentDiv.classList.remove('autocomplete-active');
					if (currentDiv.previousSibling) {
						currentDiv.previousSibling.classList.add('autocomplete-active')
					}
				} else {
					autocomplete.childNodes[autocomplete.childNodes.length-1].classList.add('autocomplete-active')
				}
			}
			if(e.keyCode == 13) {
				// ENTER key
				e.preventDefault();
				const currentDiv = autocomplete.querySelector('.autocomplete-active');
				if(!currentDiv) {
					addFilter.dispatchEvent(new Event('click'))
				} else {
					currentDiv.dispatchEvent(new Event('click'))
				}
			}
			if(e.keyCode == 27) {
				// ESC key
				autocomplete.innerHTML = '';
			}
		});

		addFilter.addEventListener('click', (e) => {
			e.preventDefault();
			const tag = filterInput.value;
			const original = addFilter.dataset.target
			window.location.href = `${original}${encodeURIComponent(tag)}`
		})

		document.addEventListener('click', (e) => {
			autocomplete.innerHTML = '';
		})

		let checkCount = 0;

		const orGroupCheckbox = document.querySelectorAll('input.or-group');
		orGroupCheckbox.forEach((checkbox) => {
			checkbox.addEventListener('click', (e) => {
				e.stopPropagation();
				if (checkbox.checked) {
					checkCount++;
				} else {
					checkCount--;
				}
				if (checkCount >= 2) {
					document.querySelector('#or-button').disabled = false
				}
				else {
					document.querySelector('#or-button').disabled = true
				}
			})

			checkbox.parentNode.addEventListener('click', (e) => {
				e.stopPropagation();
				e.preventDefault();
				checkbox.checked = !checkbox.checked;
				if (checkbox.checked) {
					checkCount++;
				} else {
					checkCount--;
				}
				if (checkCount >= 2) {
					document.querySelector('#or-button').disabled = false
				}
				else {
					document.querySelector('#or-button').disabled = true
				}
			})
		})

block after-content
	include ../partials/pagination.pug
