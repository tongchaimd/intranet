doctype html
html
	head
		meta(name="viewport", content="width=device-width, initial-scale=1")
		title= buildTitle(title)
		style
			include ../node_modules/bulma/css/bulma.css
			include ./style.css
		block script
			script(src="../public/dragdrop.js")
			script(src="../public/mammoth.browser.min.js")
			script.
				
				function readWordAsHtml(file) {
					var reader = new FileReader();
					return reader.pReadAsArrayBuffer(file)
					.then((content) => {
						return mammoth.convertToHtml({arrayBuffer: content});
					})
					.then((result) => {
						return result.value;
					})
				}

				// wrap promise around built-in method
				FileReader.prototype.pReadAsArrayBuffer = function(arg) {
					return new Promise((resolve, reject) => {
						this.readAsArrayBuffer(arg);
						this.addEventListener("loadend", () => {
							resolve(this.result);
						})
					});
				};

				// expectations: use bulma structures, 'this' == .file-label
				function onFilesSelect(err, files) {
					var dropTarget = this;

					// acceptable MIME types
					var wordTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']

					// validates files argument
					if(!files || !files.length) {
						return null;
					}
					var file = files[0];
					if(!wordTypes.includes(file.type)) {
						dropTarget.parentNode.classList.add('is-danger');
						setTimeout(()=>{dropTarget.parentNode.classList.remove('is-danger')}, 1000);
						return null;
					}

					// set element filename
					var fileName = this.parentNode.querySelector('.file-name>span');
					fileName.textContent = file.name;

					// send file to the server
					// recieve html and 
				}

				function begin() {
					var fileLabel = document.querySelector('.file-label');
					var fileName = fileLabel.querySelector('.file-name > span');

					fileLabel.addFileDroppingListener('News', onFilesSelect);
				}
	body(onload="begin()")
		if process.env.NODE_ENV == 'development'
			.dropdown.is-up(style="position: fixed; bottom: 0%; z-index: 1000;")
				.dropdown-trigger(onclick="this.parentNode.classList.toggle('is-active')")
					p dev
				.dropdown-menu
					.dropdown-content
						a.dropdown-item(href="/users/new") Sign Up
						a.dropdown-item(href="/signupAccess/new") New Signup Access
						a.dropdown-item(href="/sessions/new") Sign In
						a.dropdown-item(href="/news/new") New News
		if (Object.keys(messages).length)
			each key in Object.keys(messages)
				article.message(class="is-#{key}")
					.message-body
						each message in messages[key]
							ul
								li= message
		block content
